'use client';

import { useState } from 'react';
import AdminNavigation from '../../components/AdminNavigation';
import styles from './themes.module.css';

interface Theme {
  id: number;
  name: string;
  nameEn: string;
  visible: boolean;
  order: number;
}

export default function ThemesPage() {
  const [themes, setThemes] = useState<Theme[]>([
    { id: 105, name: '–í–µ—Å–Ω—è–Ω—ñ –º–æ—Ç–∏–≤–∏', nameEn: 'Spring motives', visible: false, order: 1 },
    { id: 104, name: '–ì–æ–ª–æ—Å –Ω–∞—Ä–æ–¥—É', nameEn: 'Voice of the people', visible: false, order: 2 },
    { id: 114, name: '–õ—å–≤—ñ–≤—Å—å–∫–∞ –º—ñ—Å—å–∫–∞ –≤–∏–±–æ—Ä—á–∞ –∫–æ–º—ñ—Å—ñ—è', nameEn: 'Lviv city election commission', visible: false, order: 3 },
    { id: 115, name: '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å–Ω–∞ –≤–∏–±–æ—Ä—á–∞ –∫–æ–º—ñ—Å—ñ—è', nameEn: 'Lviv regional election commission', visible: false, order: 4 },
    { id: 116, name: '–ë–ª—ñ—Ü-—ñ–Ω—Ç–µ—Ä–≤\'—é', nameEn: 'Blitz interview', visible: false, order: 5 },
    { id: 117, name: '–û–ª—ñ–º–ø—ñ–π—Å—å–∫—ñ —ñ–≥—Ä–∏ –≤ –†—ñ–æ 2016', nameEn: 'Olympic Games in Rio 2016', visible: false, order: 6 },
    { id: 136, name: '–í—ñ–¥–≤–µ—Ä—Ç–∞ –†–æ–∑–º–æ–≤–∞_–∑', nameEn: 'Frank Conversation_with', visible: true, order: 7 },
    { id: 137, name: '–¢–í–ö', nameEn: 'TVK', visible: false, order: 8 },
    { id: 138, name: '–í–∏–±–æ—Ä–∏', nameEn: 'Elections', visible: true, order: 9 },
    { id: 139, name: '–ñ—É—Ä–Ω–∞–ª—ñ—Å—Ç–∏–∫–∞ –∑–º—ñ–Ω', nameEn: 'Journalism of changes', visible: false, order: 10 },
    { id: 140, name: '–ü—Ä–µ—Å—Å–ª—É–∂–±–∞', nameEn: 'Press service', visible: false, order: 11 },
    { id: 141, name: '–í–∏–±–æ—Ä–∏ —Ä–µ–∫—Ç–æ—Ä–∞ –õ–ù–£', nameEn: 'Elections of LNU rector', visible: true, order: 12 },
    { id: 142, name: '–†–∞–π–æ–Ω–∏ –õ—å–≤–æ–≤–∞', nameEn: 'Districts of Lviv', visible: true, order: 13 },
  ]);

  const [language, setLanguage] = useState('–£–ö–†');

  const moveUp = (id: number) => {
    setThemes(prev => {
      const newThemes = [...prev];
      const index = newThemes.findIndex(t => t.id === id);
      if (index > 0) {
        [newThemes[index], newThemes[index - 1]] = [newThemes[index - 1], newThemes[index]];
        newThemes[index].order = index + 1;
        newThemes[index - 1].order = index;
      }
      return newThemes;
    });
  };

  const moveDown = (id: number) => {
    setThemes(prev => {
      const newThemes = [...prev];
      const index = newThemes.findIndex(t => t.id === id);
      if (index < newThemes.length - 1) {
        [newThemes[index], newThemes[index + 1]] = [newThemes[index + 1], newThemes[index]];
        newThemes[index].order = index + 1;
        newThemes[index + 1].order = index + 2;
      }
      return newThemes;
    });
  };

  const toggleVisibility = (id: number) => {
    setThemes(prev => 
      prev.map(t => t.id === id ? { ...t, visible: !t.visible } : t)
    );
  };

  const deleteTheme = (id: number) => {
    if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é —Ç–µ–º—É?')) {
      setThemes(prev => prev.filter(t => t.id !== id));
    }
  };

  const addTheme = () => {
    const name = prompt('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó —Ç–µ–º–∏:');
    if (name) {
      const newId = Math.max(...themes.map(t => t.id)) + 1;
      const newTheme: Theme = {
        id: newId,
        name,
        nameEn: name,
        visible: false,
        order: themes.length + 1,
      };
      setThemes(prev => [...prev, newTheme]);
    }
  };

  return (
    <div className={styles.themesPage}>
      <AdminNavigation />
      
      <div className={styles.mainContent}>
        <div className={styles.header}>
          <h1>–¢–µ–º–∞</h1>
          <div className={styles.languageSelector}>
            <select 
              value={language} 
              onChange={(e) => setLanguage(e.target.value)}
              className={styles.languageSelect}
            >
              <option value="–£–ö–†">–£–ö–†</option>
              <option value="ENG">ENG</option>
            </select>
          </div>
        </div>

        <div className={styles.actions}>
          <button onClick={addTheme} className={styles.addButton}>
            <span className={styles.plusIcon}>+</span>
          </button>
          <div className={styles.bulkActions}>
            <button className={styles.bulkAction}>?</button>
            <button className={styles.bulkAction}>?</button>
            <button className={styles.bulkAction}>?</button>
            <button className={styles.bulkAction}>?</button>
            <button className={styles.bulkAction}>?</button>
            <button className={styles.bulkAction}>?</button>
          </div>
        </div>

        <div className={styles.tableContainer}>
          <table className={styles.themesTable}>
            <thead>
              <tr>
                <th className={styles.nameColumn}>–ù–∞–∑–≤–∞</th>
                <th className={styles.operationsColumn}>–û–ø–µ—Ä–∞—Ü—ñ—ó</th>
              </tr>
            </thead>
            <tbody>
              {themes.map((theme) => (
                <tr key={theme.id} className={styles.tableRow}>
                  <td className={styles.nameCell}>
                    <span className={styles.themeName}>
                      {language === '–£–ö–†' ? theme.name : theme.nameEn}
                    </span>
                    <span className={styles.themeId}> ID: {theme.id}</span>
                  </td>
                  <td className={styles.operationsCell}>
                    <div className={styles.operationButtons}>
                      <button
                        onClick={() => moveUp(theme.id)}
                        className={styles.operationButton}
                        title="–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –≤–≥–æ—Ä—É"
                      >
                        ‚Üë
                      </button>
                      <button
                        onClick={() => moveDown(theme.id)}
                        className={styles.operationButton}
                        title="–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –≤–Ω–∏–∑"
                      >
                        ‚Üì
                      </button>
                      <button
                        className={styles.operationButton}
                        title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏"
                      >
                        ‚úèÔ∏è
                      </button>
                      <button
                        onClick={() => toggleVisibility(theme.id)}
                        className={`${styles.operationButton} ${styles.visibilityButton} ${theme.visible ? styles.visible : styles.hidden}`}
                        title={theme.visible ? '–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏' : '–ü–æ–∫–∞–∑–∞—Ç–∏'}
                      >
                        üëÅÔ∏è
                      </button>
                      <button
                        onClick={() => deleteTheme(theme.id)}
                        className={`${styles.operationButton} ${styles.deleteButton}`}
                        title="–í–∏–¥–∞–ª–∏—Ç–∏"
                      >
                        ‚úï
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
