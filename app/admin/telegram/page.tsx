'use client';

import { useState, useEffect } from 'react';
import { Button, Card, Input, message, Space, Typography, Divider } from 'antd';
import { SendOutlined, InfoCircleOutlined, SettingOutlined } from '@ant-design/icons';

const { Title, Text, Paragraph } = Typography;
const { TextArea } = Input;

interface BotInfo {
  id: number;
  is_bot: boolean;
  first_name: string;
  username: string;
  can_join_groups: boolean;
  can_read_all_group_messages: boolean;
  supports_inline_queries: boolean;
}

interface WebhookInfo {
  url: string;
  has_custom_certificate: boolean;
  pending_update_count: number;
  last_error_date?: number;
  last_error_message?: string;
  max_connections: number;
  allowed_updates: string[];
}

export default function TelegramBotPage() {
  const [botInfo, setBotInfo] = useState<BotInfo | null>(null);
  const [webhookInfo, setWebhookInfo] = useState<WebhookInfo | null>(null);
  const [loading, setLoading] = useState(false);
  const [testMessage, setTestMessage] = useState('');
  const [testChatId, setTestChatId] = useState('');
  const [webhookUrl, setWebhookUrl] = useState('');

  // Load bot info on component mount
  useEffect(() => {
    loadBotInfo();
    loadWebhookInfo();
  }, []);

  const loadBotInfo = async () => {
    try {
      const response = await fetch('/api/telegram/bot?action=info');
      if (response.ok) {
        const info = await response.json();
        setBotInfo(info);
      } else {
        message.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞');
      }
    } catch (error) {
      console.error('Error loading bot info:', error);
      message.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞');
    }
  };

  const loadWebhookInfo = async () => {
    try {
      const response = await fetch('/api/telegram/bot?action=webhook-info');
      if (response.ok) {
        const info = await response.json();
        setWebhookInfo(info);
      } else {
        message.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ webhook');
      }
    } catch (error) {
      console.error('Error loading webhook info:', error);
      message.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ webhook');
    }
  };

  const sendTestMessage = async () => {
    if (!testMessage.trim() || !testChatId.trim()) {
      message.warning('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ Chat ID');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('/api/admin/send-telegram', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chatId: testChatId,
          message: testMessage,
        }),
      });

      const result = await response.json();

      if (result.success) {
        message.success('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        setTestMessage('');
      } else {
        message.error(result.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
      }
    } catch (error) {
      console.error('Error sending test message:', error);
      message.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
    } finally {
      setLoading(false);
    }
  };

  const setWebhook = async () => {
    if (!webhookUrl.trim()) {
      message.warning('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å URL –¥–ª—è webhook');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('/api/telegram/bot', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'set-webhook',
          webhookUrl: webhookUrl,
        }),
      });

      const result = await response.json();

      if (result.success) {
        message.success('Webhook —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!');
        loadWebhookInfo();
      } else {
        message.error(result.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ webhook');
      }
    } catch (error) {
      console.error('Error setting webhook:', error);
      message.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ webhook');
    } finally {
      setLoading(false);
    }
  };

  const deleteWebhook = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/telegram/bot', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'delete-webhook',
        }),
      });

      const result = await response.json();

      if (result.success) {
        message.success('Webhook —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!');
        loadWebhookInfo();
      } else {
        message.error(result.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ webhook');
      }
    } catch (error) {
      console.error('Error deleting webhook:', error);
      message.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ webhook');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: '24px' }}>
      <Title level={2}>ü§ñ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Telegram –ë–æ—Ç–æ–º</Title>
      
      <Space direction="vertical" size="large" style={{ width: '100%' }}>
        {/* Bot Information */}
        <Card title="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞" icon={<InfoCircleOutlined />}>
          {botInfo ? (
            <Space direction="vertical">
              <Text><strong>–Ü–º'—è:</strong> {botInfo.first_name}</Text>
              <Text><strong>Username:</strong> @{botInfo.username}</Text>
              <Text><strong>ID:</strong> {botInfo.id}</Text>
              <Text><strong>–ú–æ–∂–µ –ø—Ä–∏—î–¥–Ω—É–≤–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø:</strong> {botInfo.can_join_groups ? '–¢–∞–∫' : '–ù—ñ'}</Text>
              <Text><strong>–ú–æ–∂–µ —á–∏—Ç–∞—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä—É–ø:</strong> {botInfo.can_read_all_group_messages ? '–¢–∞–∫' : '–ù—ñ'}</Text>
              <Text><strong>–ü—ñ–¥—Ç—Ä–∏–º—É—î inline –∑–∞–ø–∏—Ç–∏:</strong> {botInfo.supports_inline_queries ? '–¢–∞–∫' : '–ù—ñ'}</Text>
            </Space>
          ) : (
            <Text>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞...</Text>
          )}
        </Card>

        {/* Webhook Information */}
        <Card title="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Webhook" icon={<SettingOutlined />}>
          {webhookInfo ? (
            <Space direction="vertical" style={{ width: '100%' }}>
              <Text><strong>URL:</strong> {webhookInfo.url || '–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'}</Text>
              <Text><strong>–û—á—ñ–∫—É—é—á—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</strong> {webhookInfo.pending_update_count}</Text>
              <Text><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è:</strong> {webhookInfo.max_connections}</Text>
              {webhookInfo.last_error_message && (
                <Text type="danger">
                  <strong>–û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞:</strong> {webhookInfo.last_error_message}
                </Text>
              )}
              
              <Divider />
              
              <Space direction="vertical" style={{ width: '100%' }}>
                <Input
                  placeholder="–í–≤–µ–¥—ñ—Ç—å URL –¥–ª—è webhook (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://yourdomain.com/api/telegram/webhook)"
                  value={webhookUrl}
                  onChange={(e) => setWebhookUrl(e.target.value)}
                />
                <Space>
                  <Button 
                    type="primary" 
                    onClick={setWebhook}
                    loading={loading}
                  >
                    –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Webhook
                  </Button>
                  <Button 
                    danger 
                    onClick={deleteWebhook}
                    loading={loading}
                  >
                    –í–∏–¥–∞–ª–∏—Ç–∏ Webhook
                  </Button>
                  <Button onClick={loadWebhookInfo}>
                    –û–Ω–æ–≤–∏—Ç–∏
                  </Button>
                </Space>
              </Space>
            </Space>
          ) : (
            <Text>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ webhook...</Text>
          )}
        </Card>

        {/* Test Message */}
        <Card title="–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è">
          <Space direction="vertical" style={{ width: '100%' }}>
            <Input
              placeholder="–í–≤–µ–¥—ñ—Ç—å Chat ID (ID —á–∞—Ç—É –∞–±–æ –∫–∞–Ω–∞–ª—É)"
              value={testChatId}
              onChange={(e) => setTestChatId(e.target.value)}
            />
            <TextArea
              placeholder="–í–≤–µ–¥—ñ—Ç—å —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
              value={testMessage}
              onChange={(e) => setTestMessage(e.target.value)}
              rows={4}
            />
            <Button 
              type="primary" 
              icon={<SendOutlined />}
              onClick={sendTestMessage}
              loading={loading}
            >
              –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            </Button>
          </Space>
        </Card>

        {/* Instructions */}
        <Card title="–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó">
          <Space direction="vertical">
            <Paragraph>
              <strong>–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ Chat ID:</strong>
            </Paragraph>
            <ol>
              <li>–ù–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É @{botInfo?.username} –≤ Telegram</li>
              <li>–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–º–∞–Ω–¥—É /start</li>
              <li>–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</li>
              <li>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ @userinfobot</li>
            </ol>
            
            <Paragraph>
              <strong>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Webhook:</strong>
            </Paragraph>
            <ol>
              <li>–í–∫–∞–∂—ñ—Ç—å URL –≤–∞—à–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ + /api/telegram/webhook</li>
              <li>–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É</li>
              <li>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Webhook"</li>
            </ol>
          </Space>
        </Card>
      </Space>
    </div>
  );
}
