'use client';

import React, { useState } from 'react';
import { useSingleNews, SingleNewsArticle } from '@/app/hooks/useSingleNews';
import { NewsImage } from '@/app/lib/imageUtils';
import styles from './NewsDetail.module.css';

interface NewsDetailProps {
  articleType: string;
  urlkey: string;
  id: number;
  lang?: string;
  className?: string;
}

export default function NewsDetail({
  articleType,
  urlkey,
  id,
  lang = '1',
  className = ''
}: NewsDetailProps) {
  const { data, loading, error, refetch } = useSingleNews({
    articleType,
    urlkey,
    id,
    lang,
    autoFetch: true
  });

  if (loading && !data) {
    return (
      <div className={`${styles.loadingContainer} ${className}`}>
        <div className={styles.loadingSpinner}></div>
        <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className={`${styles.errorContainer} ${className}`}>
        <div className={styles.errorMessage}>
          <h3>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏</h3>
          <p>{error}</p>
          <button onClick={refetch} className={styles.retryButton}>
            –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑
          </button>
        </div>
      </div>
    );
  }

  if (!data) {
    return (
      <div className={`${styles.emptyContainer} ${className}`}>
        <div className={styles.emptyMessage}>
          <h3>–ù–æ–≤–∏–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
          <p>–ó–∞–ø–∏—Ç–∞–Ω–∞ –Ω–æ–≤–∏–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞.</p>
        </div>
      </div>
    );
  }

  const { article } = data;

  return (
    <div className={`${styles.newsDetailContainer} ${className}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className={styles.newsHeader}>
        <div className={styles.newsMeta}>
          <span className={styles.newsType}>
            {getNewsTypeLabel(article.ntype)}
          </span>
          <span className={styles.newsDate}>
            {formatDate(article.ndate)}
          </span>
        </div>
        
        <h1 className={styles.newsTitle}>{article.nheader}</h1>
        
        {article.nsubheader && (
          <h2 className={styles.newsSubtitle}>{article.nsubheader}</h2>
        )}
        
        {article.nteaser && (
          <p className={styles.newsTeaser}>{article.nteaser}</p>
        )}
      </header>

      {/* –ì–∞–ª–µ—Ä–µ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å */}
      {article.images && article.images.length > 0 && (
        <ImageGallery images={article.images} />
      )}

      {/* –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className={styles.newsContent}>
        {article.nbody && (
          <div 
            className={styles.newsBody}
            dangerouslySetInnerHTML={{ __html: article.nbody }}
          />
        )}
      </div>

      {/* –ú–µ—Ç–∞-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
      <footer className={styles.newsFooter}>
        {/* –†—É–±—Ä–∏–∫–∏ */}
        {article.rubrics && article.rubrics.length > 0 && (
          <div className={styles.newsRubrics}>
            <h4>–†—É–±—Ä–∏–∫–∏:</h4>
            <div className={styles.rubricsList}>
              {article.rubrics.map((rubric) => (
                <span key={rubric.id} className={styles.rubricTag}>
                  {rubric.title}
                </span>
              ))}
            </div>
          </div>
        )}

        {/* –¢–µ–≥–∏ */}
        {article.tags && article.tags.length > 0 && (
          <div className={styles.newsTags}>
            <h4>–¢–µ–≥–∏:</h4>
            <div className={styles.tagsList}>
              {article.tags.map((tag) => (
                <span key={tag.id} className={styles.tagItem}>
                  #{tag.tag}
                </span>
              ))}
            </div>
          </div>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className={styles.newsStats}>
          {article.views_count > 0 && (
            <span className={styles.statItem}>
              üëÅ {article.views_count} –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
            </span>
          )}
          
          {article.comments_count > 0 && (
            <span className={styles.statItem}>
              üí¨ {article.comments_count} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
            </span>
          )}
          
          {article.author_name && (
            <span className={styles.statItem}>
              ‚úçÔ∏è –ê–≤—Ç–æ—Ä: {article.author_name}
            </span>
          )}
        </div>
      </footer>

      {/* –ü–æ–≤'—è–∑–∞–Ω—ñ –Ω–æ–≤–∏–Ω–∏ */}
      {article.relatedNews && article.relatedNews.length > 0 && (
        <section className={styles.relatedNews}>
          <h3>–ü–æ–≤'—è–∑–∞–Ω—ñ –Ω–æ–≤–∏–Ω–∏</h3>
          <div className={styles.relatedNewsGrid}>
            {article.relatedNews.map((related) => (
              <RelatedNewsCard key={related.id} news={related} />
            ))}
          </div>
        </section>
      )}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å
function ImageGallery({ images }: { images: NewsImage[] }) {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [showModal, setShowModal] = useState(false);

  const currentImage = images[currentImageIndex];

  const nextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % images.length);
  };

  const prevImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + images.length) % images.length);
  };

  const openModal = () => setShowModal(true);
  const closeModal = () => setShowModal(false);

  return (
    <div className={styles.imageGallery}>
      {/* –û—Å–Ω–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è */}
      <div className={styles.mainImageContainer}>
        <img
          src={currentImage.urls.intxt}
          alt={currentImage.title}
          className={styles.mainImage}
          onClick={openModal}
        />
        
        {/* –ù–∞–≤—ñ–≥–∞—Ü—ñ—è */}
        {images.length > 1 && (
          <>
            <button
              onClick={prevImage}
              className={`${styles.navButton} ${styles.prevButton}`}
              aria-label="–ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
            >
              ‚Äπ
            </button>
            <button
              onClick={nextImage}
              className={`${styles.navButton} ${styles.nextButton}`}
              aria-label="–ù–∞—Å—Ç—É–ø–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
            >
              ‚Ä∫
            </button>
          </>
        )}
        
        {/* –õ—ñ—á–∏–ª—å–Ω–∏–∫ */}
        {images.length > 1 && (
          <div className={styles.imageCounter}>
            {currentImageIndex + 1} / {images.length}
          </div>
        )}
      </div>

      {/* –ú—ñ–Ω—ñ–∞—Ç—é—Ä–∏ */}
      {images.length > 1 && (
        <div className={styles.thumbnailsContainer}>
          {images.map((image, index) => (
            <button
              key={image.id}
              onClick={() => setCurrentImageIndex(index)}
              className={`${styles.thumbnail} ${
                index === currentImageIndex ? styles.activeThumbnail : ''
              }`}
            >
              <img
                src={image.urls.tmb}
                alt={image.title}
                className={styles.thumbnailImg}
              />
            </button>
          ))}
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É */}
      {showModal && (
        <div className={styles.modalOverlay} onClick={closeModal}>
          <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
            <button className={styles.closeButton} onClick={closeModal}>
              √ó
            </button>
            
            <img
              src={currentImage.urls.full}
              alt={currentImage.title}
              className={styles.modalImage}
            />
            
            {images.length > 1 && (
              <div className={styles.modalNavigation}>
                <button onClick={prevImage} className={styles.modalNavButton}>
                  ‚Äπ
                </button>
                <span className={styles.modalCounter}>
                  {currentImageIndex + 1} / {images.length}
                </span>
                <button onClick={nextImage} className={styles.modalNavButton}>
                  ‚Ä∫
                </button>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ–≤'—è–∑–∞–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏
function RelatedNewsCard({ news }: { news: any }) {
  return (
    <article className={styles.relatedNewsCard}>
      <h4 className={styles.relatedNewsTitle}>
        <a href={`/news/${news.urlkey}_${news.id}`}>
          {news.nheader}
        </a>
      </h4>
      {news.nteaser && (
        <p className={styles.relatedNewsTeaser}>{news.nteaser}</p>
      )}
      <span className={styles.relatedNewsDate}>
        {formatDate(news.ndate)}
      </span>
    </article>
  );
}

// –£—Ç–∏–ª—ñ—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
function getNewsTypeLabel(type: number): string {
  const typeLabels: { [key: number]: string } = {
    1: '–ù–æ–≤–∏–Ω–∞',
    2: '–°—Ç–∞—Ç—Ç—è',
    3: '–§–æ—Ç–æ—Ä–µ–ø–æ—Ä—Ç–∞–∂',
    4: '–í—ñ–¥–µ–æ',
    5: '–ê—É–¥—ñ–æ',
    6: '–ê–Ω–æ–Ω—Å',
    20: '–ë–ª–æ–≥',
    21: '–ú–µ–¥—ñ–∞'
  };
  return typeLabels[type] || '–ù–æ–≤–∏–Ω–∞';
}

function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleDateString('uk-UA', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}
