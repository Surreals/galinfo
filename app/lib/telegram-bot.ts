import TelegramBot from 'node-telegram-bot-api';

export interface TelegramMessage {
  chatId: string | number;
  message: string;
  imageUrl?: string;
  parseMode?: 'HTML' | 'Markdown' | 'MarkdownV2';
}

export class TelegramBotService {
  private bot: TelegramBot;
  private token: string;

  constructor() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN is not configured');
    }
    this.token = token;
    this.bot = new TelegramBot(this.token, { polling: false });
  }

  /**
   * Send a text message to a Telegram chat
   */
  async sendMessage(message: TelegramMessage): Promise<{ success: boolean; error?: string }> {
    try {
      const options: TelegramBot.SendMessageOptions = {
        parse_mode: message.parseMode || 'HTML',
        disable_web_page_preview: false,
      };

      await this.bot.sendMessage(message.chatId, message.message, options);
      return { success: true };
    } catch (error: any) {
      console.error('Error sending Telegram message:', error);
      
      let errorMessage = '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
      
      if (error.response?.body?.description) {
        const description = error.response.body.description;
        if (description.includes('chat not found')) {
          errorMessage = '–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Chat ID —Ç–∞ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –±–æ—Ç –¥–æ–¥–∞–Ω–∏–π –¥–æ —á–∞—Ç—É.';
        } else if (description.includes('bot was blocked')) {
          errorMessage = '–ë–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.';
        } else if (description.includes('bot is not a member')) {
          errorMessage = '–ë–æ—Ç –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ —á–∞—Ç—É. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –¥–æ —á–∞—Ç—É —Å–ø–æ—á–∞—Ç–∫—É.';
        } else if (description.includes('forbidden')) {
          errorMessage = '–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.';
        } else {
          errorMessage = description;
        }
      }
      
      return { success: false, error: errorMessage };
    }
  }

  /**
   * Send a photo with caption to a Telegram chat
   */
  async sendPhoto(message: TelegramMessage): Promise<{ success: boolean; error?: string }> {
    try {
      if (!message.imageUrl) {
        throw new Error('Image URL is required for sendPhoto');
      }

      const options: TelegramBot.SendPhotoOptions = {
        caption: message.message,
        parse_mode: message.parseMode || 'HTML',
      };

      await this.bot.sendPhoto(message.chatId, message.imageUrl, options);
      return { success: true };
    } catch (error: any) {
      console.error('Error sending Telegram photo:', error);
      
      let errorMessage = '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
      
      if (error.response?.body?.description) {
        const description = error.response.body.description;
        if (description.includes('chat not found')) {
          errorMessage = '–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Chat ID —Ç–∞ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –±–æ—Ç –¥–æ–¥–∞–Ω–∏–π –¥–æ —á–∞—Ç—É.';
        } else if (description.includes('bot was blocked')) {
          errorMessage = '–ë–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.';
        } else if (description.includes('bot is not a member')) {
          errorMessage = '–ë–æ—Ç –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ —á–∞—Ç—É. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –¥–æ —á–∞—Ç—É —Å–ø–æ—á–∞—Ç–∫—É.';
        } else if (description.includes('forbidden')) {
          errorMessage = '–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.';
        } else {
          errorMessage = description;
        }
      }
      
      return { success: false, error: errorMessage };
    }
  }

  /**
   * Send a message with or without photo
   */
  async sendMessageWithPhoto(message: TelegramMessage): Promise<{ success: boolean; error?: string }> {
    if (message.imageUrl) {
      const photoResult = await this.sendPhoto(message);
      if (photoResult.success) {
        return photoResult;
      }
      // If photo fails, fall back to text message
      console.warn('Failed to send photo, falling back to text message');
    }
    
    return await this.sendMessage(message);
  }

  /**
   * Get bot information
   */
  async getBotInfo(): Promise<any> {
    try {
      const botInfo = await this.bot.getMe();
      return botInfo;
    } catch (error) {
      console.error('Error getting bot info:', error);
      throw error;
    }
  }

  /**
   * Set webhook URL
   */
  async setWebhook(webhookUrl: string): Promise<boolean> {
    try {
      await this.bot.setWebHook(webhookUrl);
      return true;
    } catch (error) {
      console.error('Error setting webhook:', error);
      return false;
    }
  }

  /**
   * Delete webhook
   */
  async deleteWebhook(): Promise<boolean> {
    try {
      await this.bot.deleteWebHook();
      return true;
    } catch (error) {
      console.error('Error deleting webhook:', error);
      return false;
    }
  }

  /**
   * Get webhook info
   */
  async getWebhookInfo(): Promise<any> {
    try {
      const webhookInfo = await this.bot.getWebHookInfo();
      return webhookInfo;
    } catch (error) {
      console.error('Error getting webhook info:', error);
      throw error;
    }
  }

  /**
   * Process incoming webhook update
   */
  async processWebhookUpdate(update: any): Promise<void> {
    try {
      // Handle different types of updates
      if (update.message) {
        await this.handleMessage(update.message);
      } else if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      }
    } catch (error) {
      console.error('Error processing webhook update:', error);
    }
  }

  /**
   * Handle incoming messages
   */
  private async handleMessage(message: any): Promise<void> {
    const chatId = message.chat.id;
    const text = message.text;

    console.log(`Received message from ${chatId}: ${text}`);

    // Basic command handling
    if (text === '/start') {
      await this.bot.sendMessage(chatId, '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–æ–≤–∏–Ω GalInfo. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏.');
    } else if (text === '/help') {
      const helpText = `
ü§ñ <b>–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:</b>

/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/news - –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏
/about - –ü—Ä–æ —Å–∞–π—Ç GalInfo

–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!
      `;
      await this.bot.sendMessage(chatId, helpText, { parse_mode: 'HTML' });
    } else if (text === '/news') {
      await this.bot.sendMessage(chatId, '–û—Ç—Ä–∏–º—É—é –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏...');
      // Here you can integrate with your news API
    } else if (text === '/about') {
      const aboutText = `
üì∞ <b>GalInfo</b> - –≤–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –¥–∂–µ—Ä–µ–ª–æ –Ω–æ–≤–∏–Ω

–ú–∏ –Ω–∞–¥–∞—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö —Å—Ñ–µ—Ä –∂–∏—Ç—Ç—è:
‚Ä¢ –ü–æ–ª—ñ—Ç–∏–∫–∞
‚Ä¢ –ï–∫–æ–Ω–æ–º—ñ–∫–∞  
‚Ä¢ –°–ø–æ—Ä—Ç
‚Ä¢ –ö—É–ª—å—Ç—É—Ä–∞
‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó
‚Ä¢ –Ü –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ

–í—ñ–¥–≤—ñ–¥–∞–π—Ç–µ –Ω–∞—à —Å–∞–π—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó!
      `;
      await this.bot.sendMessage(chatId, aboutText, { parse_mode: 'HTML' });
    } else {
      // Handle general messages
      await this.bot.sendMessage(chatId, '–î—è–∫—É—é –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑ –Ω–æ–≤–∏–Ω–∞–º–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.');
    }
  }

  /**
   * Handle callback queries from inline keyboards
   */
  private async handleCallbackQuery(callbackQuery: any): Promise<void> {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    console.log(`Received callback query from ${chatId}: ${data}`);

    // Answer the callback query
    await this.bot.answerCallbackQuery(callbackQuery.id);

    // Handle different callback data
    switch (data) {
      case 'latest_news':
        await this.bot.sendMessage(chatId, '–û—Ç—Ä–∏–º—É—é –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏...');
        break;
      case 'important_news':
        await this.bot.sendMessage(chatId, '–û—Ç—Ä–∏–º—É—é –≤–∞–∂–ª–∏–≤—ñ –Ω–æ–≤–∏–Ω–∏...');
        break;
      default:
        await this.bot.sendMessage(chatId, '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.');
    }
  }
}

// Export a singleton instance
export const telegramBot = new TelegramBotService();
