import { NextRequest, NextResponse } from 'next/server';
import { readFile, writeFile, mkdir, access } from 'fs/promises';
import { join } from 'path';
import { constants } from 'fs';

// –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç Sharp –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ –±—ñ–ª–¥—ñ
let sharp: any;
try {
  sharp = require('sharp');
} catch (error) {
  console.error('Sharp not available:', error);
}

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—ñ–≤
const SIZE_CONFIG = {
  tmb: { width: 150, height: 150, quality: 80 },
  intxt: { width: 800, height: 600, quality: 85 },
  full: null // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
};

export async function GET(
  request: NextRequest,
  { params }: { params: { path: string[] } }
) {
  try {
    const pathSegments = params.path;
    
    // –ü–∞—Ä—Å–∏–º–æ —à–ª—è—Ö: [size, char1, char2, filename]
    // –ü—Ä–∏–∫–ª–∞–¥: /tmb/1/7/1761574574725_59m3t1s5ikd.jpg
    if (pathSegments.length < 4) {
      return new NextResponse('Invalid path', { status: 400 });
    }
    
    const [size, char1, char2, ...filenameParts] = pathSegments;
    const filename = filenameParts.join('/'); // –ù–∞ –≤–∏–ø–∞–¥–æ–∫ —è–∫—â–æ –≤ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É —î —Å–ª–µ—à–∏
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—Ä—É
    if (!['full', 'intxt', 'tmb'].includes(size)) {
      return new NextResponse('Invalid size', { status: 400 });
    }
    
    const basePath = process.env.MEDIA_STORAGE_PATH || join(process.cwd(), 'public', 'media');
    const requestedPath = join(basePath, 'gallery', size, char1, char2, filename);
    const fullPath = join(basePath, 'gallery', 'full', char1, char2, filename);
    
    console.log(`üîç Media request: ${size}/${char1}/${char2}/${filename}`);
    
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª —É –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É —Ä–æ–∑–º—ñ—Ä—ñ
    try {
      await access(requestedPath, constants.F_OK);
      console.log(`‚úÖ Found existing file: ${requestedPath}`);
      
      // –§–∞–π–ª —ñ—Å–Ω—É—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
      const fileBuffer = await readFile(requestedPath);
      const contentType = getContentType(filename);
      
      return new NextResponse(fileBuffer, {
        headers: {
          'Content-Type': contentType,
          'Cache-Control': 'public, max-age=31536000', // –ö–µ—à—É—î–º–æ –Ω–∞ —Ä—ñ–∫
          'Last-Modified': new Date().toUTCString(),
        },
      });
      
    } catch (error) {
      // –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, –≥–µ–Ω–µ—Ä—É—î–º–æ –∑ full –≤–µ—Ä—Å—ñ—ó
      console.log(`‚ö†Ô∏è File not found: ${requestedPath}, generating from full...`);
    }
    
    // –Ø–∫—â–æ —Ü–µ full —Ä–æ–∑–º—ñ—Ä, –∞–ª–µ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    if (size === 'full') {
      return new NextResponse('File not found', { status: 404 });
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
    try {
      await access(fullPath, constants.F_OK);
    } catch (error) {
      console.log(`‚ùå Original file not found: ${fullPath}`);
      return new NextResponse('Original file not found', { status: 404 });
    }
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
    const originalBuffer = await readFile(fullPath);
    const sizeConfig = SIZE_CONFIG[size as keyof typeof SIZE_CONFIG];
    
    if (!sizeConfig) {
      return new NextResponse('Invalid size configuration', { status: 400 });
    }
    
    console.log(`üîß Generating ${size} version: ${sizeConfig.width}x${sizeConfig.height}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Sharp
    if (!sharp) {
      return new NextResponse('Image processing not available', { status: 500 });
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
    const resizedBuffer = await sharp(originalBuffer)
      .resize({ 
        width: sizeConfig.width, 
        height: sizeConfig.height, 
        fit: 'inside', 
        withoutEnlargement: true 
      })
      .jpeg({ quality: sizeConfig.quality })
      .toBuffer();
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    try {
      const dirPath = join(basePath, 'gallery', size, char1, char2);
      await mkdir(dirPath, { recursive: true });
      
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ .jpg –¥–ª—è –∑–∂–∞—Ç–∏—Ö –≤–µ—Ä—Å—ñ–π
      const savedFilename = size === 'full' ? filename : filename.replace(/\.[^.]+$/, '.jpg');
      const savedPath = join(dirPath, savedFilename);
      
      await writeFile(savedPath, resizedBuffer);
      console.log(`üíæ Saved generated file: ${savedPath}`);
    } catch (saveError) {
      console.error('Failed to save generated file:', saveError);
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
    }
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    return new NextResponse(resizedBuffer, {
      headers: {
        'Content-Type': 'image/jpeg',
        'Cache-Control': 'public, max-age=31536000',
        'Last-Modified': new Date().toUTCString(),
      },
    });
    
  } catch (error) {
    console.error('Media API error:', error);
    return new NextResponse('Internal server error', { status: 500 });
  }
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
function getContentType(filename: string): string {
  const ext = filename.toLowerCase().split('.').pop();
  
  switch (ext) {
    case 'jpg':
    case 'jpeg':
      return 'image/jpeg';
    case 'png':
      return 'image/png';
    case 'gif':
      return 'image/gif';
    case 'webp':
      return 'image/webp';
    case 'svg':
      return 'image/svg+xml';
    default:
      return 'image/jpeg'; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  }
}
