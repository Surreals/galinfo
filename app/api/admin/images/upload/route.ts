import { NextRequest, NextResponse } from 'next/server';
import { writeFile, mkdir } from 'fs/promises';
import { join } from 'path';
import { executeQuery } from '@/app/lib/db';
import { config } from '@/app/lib/config';

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const file = formData.get('file') as File;
    const title = formData.get('title') as string;
    const picType = formData.get('pic_type') as string;
    const description = formData.get('description') as string;

    if (!file) {
      return NextResponse.json(
        { error: 'No file provided' },
        { status: 400 }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
    if (!file.type.startsWith('image/')) {
      return NextResponse.json(
        { error: 'File must be an image' },
        { status: 400 }
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É (–º–∞–∫—Å–∏–º—É–º 10MB)
    if (file.size > 10 * 1024 * 1024) {
      return NextResponse.json(
        { error: 'File size must be less than 10MB' },
        { status: 400 }
      );
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
    const timestamp = Date.now();
    const fileExtension = file.name.split('.').pop();
    const filename = `${timestamp}_${Math.random().toString(36).substring(2)}.${fileExtension}`;
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∞–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–µ—Ä—à–∏—Ö –¥–≤–æ—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    const firstChar = filename.charAt(0);
    const secondChar = filename.charAt(1);
    
    // –®–ª—è—Ö–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å
    // Use external storage path if configured, otherwise fallback to public directory
    const mediaPath = process.env.MEDIA_STORAGE_PATH;
    const basePath = mediaPath 
      ? mediaPath 
      : join(process.cwd(), 'public', 'media');
    
    // Debug logging to verify configuration
    console.log('üîç Image Upload Configuration:');
    console.log('  MEDIA_STORAGE_PATH env:', process.env.MEDIA_STORAGE_PATH);
    console.log('  Using base path:', basePath);
    console.log('  Is external storage:', !!mediaPath);
    
    const fullPath = join(basePath, 'gallery', 'full', firstChar, secondChar);
    const tmbPath = join(basePath, 'gallery', 'tmb', firstChar, secondChar);
    const intxtPath = join(basePath, 'gallery', 'intxt', firstChar, secondChar);
    
    console.log('  Full path:', fullPath);
    console.log('  Thumbnail path:', tmbPath);
    console.log('  In-text path:', intxtPath);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
    await mkdir(fullPath, { recursive: true });
    await mkdir(tmbPath, { recursive: true });
    await mkdir(intxtPath, { recursive: true });

    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const fullFilePath = join(fullPath, filename);
    await writeFile(fullFilePath, buffer);

    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–Ω—ñ–∞—Ç—é—Ä
    // –ü–æ–∫–∏ —â–æ –∫–æ–ø—ñ—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª –≤ —ñ–Ω—à—ñ –ø–∞–ø–∫–∏
    await writeFile(join(tmbPath, filename), buffer);
    await writeFile(join(intxtPath, filename), buffer);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    const insertQuery = `
      INSERT INTO a_pics (filename, title_ua, title_deflang, pic_type)
      VALUES (?, ?, ?, ?)
    `;
    
    // Convert pic_type string to integer
    const getPicTypeId = (type: string): number => {
      const typeMap: { [key: string]: number } = {
        'news': 1,
        'gallery': 2,
        'avatar': 3,
        'banner': 4
      };
      return typeMap[type] || 2; // Default to gallery (2) if type not found
    };

    const [result] = await executeQuery(insertQuery, [
      filename,
      title || file.name,
      title || file.name, // title_deflang - using same value as title_ua
      getPicTypeId(picType || 'gallery')
    ]);

    // –û—Ç—Ä–∏–º—É—î–º–æ ID –≤—Å—Ç–∞–≤–ª–µ–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É
    const imageId = (result as any).insertId;

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const selectQuery = `
      SELECT 
        id,
        filename,
        title_ua,
        title_deflang,
        pic_type
      FROM a_pics 
      WHERE id = ?
    `;
    
    const [imageData] = await executeQuery(selectQuery, [imageId]);

    if (imageData.length === 0) {
      throw new Error('Failed to retrieve uploaded image data');
    }

    const image = imageData[0];

    // –î–æ–¥–∞—î–º–æ URL –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–Ω–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –ª–æ–∫–∞–ª—å–Ω—ñ —à–ª—è—Ö–∏)
    const imageWithUrl = {
      ...image,
      url: `/media/gallery/full/${firstChar}/${secondChar}/${filename}`,
      thumbnail_url: `/media/gallery/tmb/${firstChar}/${secondChar}/${filename}`
    };

    return NextResponse.json({
      success: true,
      image: imageWithUrl
    });

  } catch (error) {
    console.error('Error uploading image:', error);
    return NextResponse.json(
      { error: 'Failed to upload image' },
      { status: 500 }
    );
  }
}
