const mysql = require('mysql2/promise');
const dotenv = require('dotenv');
const path = require('path');

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env —Ñ–∞–π–ª
dotenv.config({ path: path.join(__dirname, '..', '.env') });
dotenv.config({ path: path.join(__dirname, '..', '.env.local') });

async function checkAndCreateTable() {
  let connection;
  
  try {
    // –°–ø—Ä–æ–±—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ app/lib/db.ts
    const dbConfig = {
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'galinfodb_db',
      port: parseInt(process.env.DB_PORT || '3306'),
    };

    console.log('üîå –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î...');
    console.log('Host:', dbConfig.host);
    console.log('Database:', dbConfig.database);
    console.log('User:', dbConfig.user);

    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –ë–î —É—Å–ø—ñ—à–Ω–æ!\n');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞–±–ª–∏—Ü—ñ advertisements...');
    const [tables] = await connection.execute(
      "SHOW TABLES LIKE 'advertisements'"
    );

    if (tables.length > 0) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è advertisements –≤–∂–µ —ñ—Å–Ω—É—î\n');
      
      // –ü–æ–∫–∞–∂–µ–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const [columns] = await connection.execute('DESCRIBE advertisements');
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ:');
      columns.forEach(col => {
        console.log(`  - ${col.Field} (${col.Type})`);
      });
      
      // –ü–æ–∫–∞–∂–µ–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
      const [count] = await connection.execute('SELECT COUNT(*) as total FROM advertisements');
      console.log(`\nüìä –ó–∞–ø–∏—Å—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ: ${count[0].total}`);
      
    } else {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—è advertisements –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞\n');
      console.log('üî® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ...\n');

      await connection.execute(`
        CREATE TABLE IF NOT EXISTS advertisements (
          id INT AUTO_INCREMENT PRIMARY KEY,
          title VARCHAR(255) NOT NULL,
          image_url VARCHAR(500),
          link_url VARCHAR(500) NOT NULL,
          is_active BOOLEAN DEFAULT true,
          display_order INT DEFAULT 0,
          click_count INT DEFAULT 0,
          view_count INT DEFAULT 0,
          start_date DATETIME NULL,
          end_date DATETIME NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
          INDEX idx_active (is_active),
          INDEX idx_order (display_order),
          INDEX idx_dates (start_date, end_date)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
      `);

      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—é advertisements —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n');

      // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
      console.log('üìù –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...');
      await connection.execute(`
        INSERT INTO advertisements (title, image_url, link_url, is_active, display_order)
        VALUES 
          ('–¢–µ—Å—Ç–æ–≤–∞ —Ä–µ–∫–ª–∞–º–∞ 1', '/media/sample-ad.jpg', 'https://example.com', true, 1),
          ('–¢–µ—Å—Ç–æ–≤–∞ —Ä–µ–∫–ª–∞–º–∞ 2', '/media/sample-ad2.jpg', 'https://example.com/promo', false, 2)
      `);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–æ–¥–∞–Ω–æ!\n');
    }

    console.log('‚ú® –ì–æ—Ç–æ–≤–æ!');

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
    console.error('\nüí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:');
    console.error('  1. –ß–∏ –∑–∞–ø—É—â–µ–Ω–∏–π MySQL —Å–µ—Ä–≤–µ—Ä');
    console.error('  2. –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤ .env');
    console.error('  3. –ß–∏ —ñ—Å–Ω—É—î –±–∞–∑–∞ –¥–∞–Ω–∏—Ö:', process.env.DB_NAME || 'galinfodb_db');
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

checkAndCreateTable();

