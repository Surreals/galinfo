/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö —Å—Ö–µ–º –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
 * –ö–æ–ø—ñ—é—î —ñ—Å–Ω—É—é—á—ñ —Å—Ö–µ–º–∏ –∑ /app/lib/*Schema.js –≤ —Ç–∞–±–ª–∏—Ü—é template_schemas
 */

const mysql = require('mysql2/promise');
require('dotenv').config();

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Å—Ö–µ–º–∏
const { desktopSchema, mobileSchema } = require('../app/lib/schema.js');
const { categoryDesktopSchema, categoryMobileSchema } = require('../app/lib/categorySchema.js');
const { heroSchema, heroInfoSchema, heroInfoMobileSchema } = require('../app/lib/heroSchema.js');
const { articlePageDesktopSchema, articlePageMobileSchema } = require('../app/lib/articlePageSchema.js');

async function initDefaultSchemas() {
  let connection;

  try {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'galinfo',
    });

    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');

    // –ú–∞—Å–∏–≤ —Å—Ö–µ–º –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const schemas = [
      {
        template_id: 'main-desktop',
        name: '–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (–î–µ—Å–∫—Ç–æ–ø)',
        description: '–°—Ö–µ–º–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏',
        schema_json: desktopSchema
      },
      {
        template_id: 'main-mobile',
        name: '–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (–ú–æ–±—ñ–ª—å–Ω–∞)',
        description: '–°—Ö–µ–º–∞ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏',
        schema_json: mobileSchema
      },
      {
        template_id: 'category-desktop',
        name: '–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–î–µ—Å–∫—Ç–æ–ø)',
        description: '–°—Ö–µ–º–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó',
        schema_json: categoryDesktopSchema
      },
      {
        template_id: 'category-mobile',
        name: '–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–ú–æ–±—ñ–ª—å–Ω–∞)',
        description: '–°—Ö–µ–º–∞ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó',
        schema_json: categoryMobileSchema
      },
      {
        template_id: 'hero',
        name: 'Hero —Å–µ–∫—Ü—ñ—è',
        description: '–°—Ö–µ–º–∞ –¥–ª—è Hero —Å–µ–∫—Ü—ñ—ó –∑ –∫–∞—Ä—É—Å–µ–ª–ª—é',
        schema_json: heroSchema
      },
      {
        template_id: 'hero-info-desktop',
        name: 'Hero Info (–î–µ—Å–∫—Ç–æ–ø)',
        description: '–°—Ö–µ–º–∞ –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏ Hero —Å–µ–∫—Ü—ñ—ó (–¥–µ—Å–∫—Ç–æ–ø)',
        schema_json: heroInfoSchema
      },
      {
        template_id: 'hero-info-mobile',
        name: 'Hero Info (–ú–æ–±—ñ–ª—å–Ω–∞)',
        description: '–°—Ö–µ–º–∞ –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏ Hero —Å–µ–∫—Ü—ñ—ó (–º–æ–±—ñ–ª—å–Ω–∞)',
        schema_json: heroInfoMobileSchema
      },
      {
        template_id: 'article-desktop',
        name: '–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–∞—Ç—Ç—ñ (–î–µ—Å–∫—Ç–æ–ø)',
        description: '–°—Ö–µ–º–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å—Ç–∞—Ç—Ç—ñ',
        schema_json: articlePageDesktopSchema
      },
      {
        template_id: 'article-mobile',
        name: '–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–∞—Ç—Ç—ñ (–ú–æ–±—ñ–ª—å–Ω–∞)',
        description: '–°—Ö–µ–º–∞ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å—Ç–∞—Ç—Ç—ñ',
        schema_json: articlePageMobileSchema
      }
    ];

    // –í—Å—Ç–∞–≤–ª—è—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—É —Å—Ö–µ–º—É
    for (const schema of schemas) {
      const query = `
        INSERT INTO template_schemas (template_id, name, description, schema_json)
        VALUES (?, ?, ?, ?)
        ON DUPLICATE KEY UPDATE
          name = VALUES(name),
          description = VALUES(description),
          schema_json = VALUES(schema_json),
          updated_at = CURRENT_TIMESTAMP
      `;

      await connection.execute(query, [
        schema.template_id,
        schema.name,
        schema.description,
        JSON.stringify(schema.schema_json)
      ]);

      console.log(`‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Å—Ö–µ–º—É: ${schema.name} (${schema.template_id})`);
    }

    console.log('\nüéâ –í—Å—ñ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ —Å—Ö–µ–º–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ!');

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
      console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
initDefaultSchemas();

