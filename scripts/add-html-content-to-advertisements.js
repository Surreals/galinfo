const mysql = require('mysql2/promise');
const dotenv = require('dotenv');
const path = require('path');

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ .env —Ç–∞ .env.local (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ —ñ–Ω—à–∏–º —Å–∫—Ä–∏–ø—Ç–∞–º)
dotenv.config({ path: path.join(__dirname, '..', '.env') });
dotenv.config({ path: path.join(__dirname, '..', '.env.local') });

async function addHtmlContentColumn() {
  const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'galinfodb_db',
    port: parseInt(process.env.DB_PORT || '3306'),
  };

  const connection = await mysql.createConnection(dbConfig);

  try {
    console.log('üîÑ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É...');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ–ª–æ–Ω–∫–∞ content_type
    const [columns] = await connection.query(`
      SELECT COLUMN_NAME 
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE TABLE_SCHEMA = ? 
        AND TABLE_NAME = 'advertisements' 
        AND COLUMN_NAME IN ('content_type', 'html_content')
    `, [process.env.DB_NAME]);

    const existingColumns = columns.map(row => row.COLUMN_NAME);
    
    // –î–æ–¥–∞—î–º–æ content_type —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    if (!existingColumns.includes('content_type')) {
      await connection.query(`
        ALTER TABLE advertisements 
        ADD COLUMN content_type ENUM('image', 'html') DEFAULT 'image' AFTER link_url
      `);
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫—É content_type –¥–æ–¥–∞–Ω–æ');
    } else {
      console.log('‚ÑπÔ∏è  –ö–æ–ª–æ–Ω–∫–∞ content_type –≤–∂–µ —ñ—Å–Ω—É—î');
    }

    // –î–æ–¥–∞—î–º–æ html_content —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    if (!existingColumns.includes('html_content')) {
      await connection.query(`
        ALTER TABLE advertisements 
        ADD COLUMN html_content TEXT NULL AFTER content_type
      `);
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫—É html_content –¥–æ–¥–∞–Ω–æ');
    } else {
      console.log('‚ÑπÔ∏è  –ö–æ–ª–æ–Ω–∫–∞ html_content –≤–∂–µ —ñ—Å–Ω—É—î');
    }

    console.log('‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ–ª–æ–Ω–æ–∫:', error);
    throw error;
  } finally {
    await connection.end();
  }
}

addHtmlContentColumn()
  .then(() => {
    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  });


