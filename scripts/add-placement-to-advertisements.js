const mysql = require('mysql2/promise');
const dotenv = require('dotenv');
const path = require('path');

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env —Ñ–∞–π–ª
dotenv.config({ path: path.join(__dirname, '..', '.env') });
dotenv.config({ path: path.join(__dirname, '..', '.env.local') });

async function addPlacementColumn() {
  let connection;
  
  try {
    const dbConfig = {
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'galinfodb_db',
      port: parseInt(process.env.DB_PORT || '3306'),
    };

    console.log('üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î...');
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ!\n');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ–ª–æ–Ω–∫–∞ placement
    const [columns] = await connection.execute(
      "SHOW COLUMNS FROM advertisements LIKE 'placement'"
    );

    if (columns.length > 0) {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ placement –≤–∂–µ —ñ—Å–Ω—É—î\n');
    } else {
      console.log('üî® –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ placement...');
      
      await connection.execute(`
        ALTER TABLE advertisements 
        ADD COLUMN placement VARCHAR(50) DEFAULT 'general' AFTER link_url,
        ADD INDEX idx_placement (placement)
      `);

      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫—É placement –¥–æ–¥–∞–Ω–æ!\n');
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    console.log('üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∑ placement...');
    
    await connection.execute(`
      UPDATE advertisements 
      SET placement = 'adbanner' 
      WHERE id = 1
    `);

    await connection.execute(`
      UPDATE advertisements 
      SET placement = 'infomo' 
      WHERE id = 2
    `);

    // –î–æ–¥–∞—î–º–æ —Ç—Ä–µ—Ç—é —Ä–µ–∫–ª–∞–º—É –¥–ª—è sidebar —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    const [existing] = await connection.execute(
      "SELECT id FROM advertisements WHERE placement = 'sidebar'"
    );

    if (existing.length === 0) {
      await connection.execute(`
        INSERT INTO advertisements 
        (title, image_url, link_url, placement, is_active, display_order)
        VALUES 
        ('–¢–µ—Å—Ç–æ–≤–∞ —Ä–µ–∫–ª–∞–º–∞ Sidebar', '/media/sample-ad3.jpg', 'https://example.com/sidebar', 'sidebar', true, 3)
      `);
      console.log('‚úÖ –î–æ–¥–∞–Ω–æ —Ä–µ–∫–ª–∞–º—É –¥–ª—è sidebar');
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n');

    // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const [ads] = await connection.execute(
      'SELECT id, title, placement, is_active FROM advertisements ORDER BY id'
    );

    console.log('üìä –ü–æ—Ç–æ—á–Ω—ñ —Ä–µ–∫–ª–∞–º–∏:');
    ads.forEach(ad => {
      console.log(`  ${ad.id}. [${ad.placement}] ${ad.title} (${ad.is_active ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'})`);
    });

    console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ!');
    console.log('\nüìç –î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:');
    console.log('  - adbanner: –≥–æ–ª–æ–≤–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ (AdBanner –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)');
    console.log('  - infomo: IN-FOMO –±–∞–Ω–µ—Ä');
    console.log('  - sidebar: —Ä–µ–∫–ª–∞–º–∞ –≤ —Å–∞–π–¥–±–∞—Ä—ñ');
    console.log('  - general: –∑–∞–≥–∞–ª—å–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)');

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

addPlacementColumn();

